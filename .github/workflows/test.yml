# This is a basic workflow to help you get started with Actions

name: CICD_develop_TEST

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  push:
    branches: [ develop ]
 

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Build_Deploy_TEST:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: TEST
    
    steps:   
    
    - name: Fetch Depth
      uses: actions/checkout@v2
      # fetch depth is used to disable shallow cloning while sonarqube analysis
      with:
        fetch-depth: 0
        
      # "Note: the 'AZURE_SP' secret is required to be added into GitHub Secrets. See this blog post for details: https://samlearnsazure.blog/2019/12/13/github-actions/"
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_SP }} 
      
    - name: Fetch Keyvault values
      uses: Azure/get-keyvault-secrets@v1
      with:
        # Name of the azure key vault
        keyvault: ${{ secrets.KEYVAULT_NAME }} # name of key vault in Azure portal
        # Name of the secret to be fetched
        secrets: 'AzureAd-TenantId,AzureAd-Authority,AzureAd-ClientId,AzureAd-Audience,AzureAd-RedirectUrl,AzureAd-LoginUrl,Apim-BaseUrl,Env-Name'  # comma separated list of secret keys to fetch from key vault 
      id: keyvaultSecretAction # ID for secrets that you will reference    
    
    
    - name: Find and Replace User Name - Using Build Variable
      # Variables in environment.ts is replaced using the find script while fetching it from keyvault through secrets
      run: |
        find ${{ github.workspace }}/SDR-WebApp/src/environments/environment.ts -type f -exec sed -i ''s@{#AzureAd-TenantId#}@'${{ steps.keyvaultSecretAction.outputs.AzureAd-TenantId }}'@g'' {} \;
        find ${{ github.workspace }}/SDR-WebApp/src/environments/environment.ts -type f -exec sed -i ''s@{#AzureAd-Authority#}@'${{ steps.keyvaultSecretAction.outputs.AzureAd-Authority }}'@g'' {} \;
        find ${{ github.workspace }}/SDR-WebApp/src/environments/environment.ts -type f -exec sed -i ''s@{#AzureAd-ClientId#}@'${{ steps.keyvaultSecretAction.outputs.AzureAd-ClientId }}'@g'' {} \;
        find ${{ github.workspace }}/SDR-WebApp/src/environments/environment.ts -type f -exec sed -i ''s@{#AzureAd-Audience#}@'${{ steps.keyvaultSecretAction.outputs.AzureAd-Audience }}'@g'' {} \;
        find ${{ github.workspace }}/SDR-WebApp/src/environments/environment.ts -type f -exec sed -i ''s@{#AzureAd-RedirectUrl#}@'${{ steps.keyvaultSecretAction.outputs.AzureAd-RedirectUrl }}'@g'' {} \;
        find ${{ github.workspace }}/SDR-WebApp/src/environments/environment.ts -type f -exec sed -i ''s@{#AzureAd-LoginUrl#}@'${{ steps.keyvaultSecretAction.outputs.AzureAd-LoginUrl }}'@g'' {} \;
        find ${{ github.workspace }}/SDR-WebApp/src/environments/environment.ts -type f -exec sed -i ''s@{#Apim-BaseUrl#}@'${{ steps.keyvaultSecretAction.outputs.Apim-BaseUrl }}'@g'' {} \;
        find ${{ github.workspace }}/SDR-WebApp/src/environments/environment.ts -type f -exec sed -i ''s@{#Env-Name#}@'${{ steps.keyvaultSecretAction.outputs.Env-Name }}'@g'' {} \;
              
    - name: Use Node 14.x
      uses: actions/setup-node@v1
      with:
        # The node.js version to use
        node-version: 14.x
      
    - name: npm cli
      # Few npm dependencies needs to be installed seperately through command line as it throwa error
      run: |
         cd ${{ github.workspace }}/SDR-WebApp
         npm install -g @angular/cli@13.0.3         
         npm install @angular-devkit/build-angular
         npm install @materia-ui/ngx-monaco-editor
         npm install typescript@4.4.4
         npm install @angular-builders/custom-webpack
         npm install ngx-spinner@13.1.1
         npm install webpack-obfuscator@3.5.1
         npm install javascript-obfuscator@4.0.0
         npm install tslint-angular@3.0.3
         npm install -g sonarqube-scanner
         npm install ngx-bootstrap@8.0.0
         npm install rxjs@7.4.0
         npm install karma-jasmine@4.0.0
  
    - name: npm install
      # Install the other dependecies for the SDR-WebApp project
      run:  npm install SDR-WebApp
         
    - name: npm update
     # Update the other packages for the SDR-WebApp project
      run:  npm update SDR-WebApp
      
    - name: Build SDR-WebApp
      # For building the project
      run: |
         cd ${{ github.workspace }}/SDR-WebApp
         ng build --configuration=production
         # For checking the list of files after the Build completion
         cd ${{ github.workspace }}/SDR-WebApp/dist
         ls
         cd ${{ github.workspace }}/SDR-WebApp/dist/SDR-WebApp
         ls
         
    - name: 'Copy Files to: ${{ github.workspace }}'
      # Copying the artifacts generated after build to github default workspace
      run: |
       # For checking the contents after copying the artifacts to default directory
       cp -R '${{ github.workspace }}/SDR-WebApp/dist/SDR-WebApp' '${{ github.workspace }}'
       cd  ${{ github.workspace }}
       ls     
      
    - name: 'Publish Artifact: Artifact'
      uses: actions/upload-artifact@v2
      # To publish the artifact
      with:
        path: '${{ github.workspace }}/SDR-WebApp/dist/**'
        name: Build-Artifact
    
    
######################---------------Jasmine Test Cases-----------------------#############################

    - name: Run Angular tests
      # Running the jasmine test cases
      run: |
          cd '${{ github.workspace }}/SDR-WebApp'
          npm install karma-jasmine --save-dev
          ng test --reporters junit --watch=false --browsers ChromeHeadless || true

          
          
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v1
      # Publish the test cases results
      if: always()
      with:
        files: '${{ github.workspace }}/SDR-WebApp/testresults/junit/unit-test-result.xml'
    
 
 #############################-----------Sonar Scan---------------#############################################
     
          
    # - name: Run Angular tests for Sonar
    #   # Running the jasmine test cases and copying the test case files to default github directory
    #   run: |
    #       cd '${{ github.workspace }}/SDR-WebApp'
    #       ng test --code-coverage true --watch=false --browsers ChromeHeadless  || true
    #       # Copying the coverage.xml and lcov.info to Github default working directory for sonarqube analysis
    #       cp testresults/coverage/cobertura-coverage.xml '${{ github.workspace }}/coverage.xml'    
    #       cp testresults/coverage/lcov.info '${{ github.workspace }}/lcov.info' 
          
     
    # - uses: actions/setup-dotnet@v1
    #   # Setup for installing sonar-scanner
    #   with:
    #     dotnet-version: 6.0.x
        
    # - name: Install SonarQube scanner
    #   # Installing Sonar scanner
    #   if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
    #   shell: pwsh
    #   run: |
    #       # reportgenrator used for converting the report files
    #       dotnet tool update dotnet-reportgenerator-globaltool -g 
    #       reportgenerator "-reports:${{ github.workspace }}/SDR-WebApp/testresults/*/cobertura-coverage.xml" "-targetdir:coverage" -reporttypes:"Cobertura;SonarQube;lcov"
          
    # - name: Run Sonar
    #   env:
    #     # SONAR_TOKEN and SONAR_HOST_URL getting fetched from secrets
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    #   run: |
    #       cd '${{ github.workspace }}/SDR-WebApp'
    #       sonar-scanner -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN || true

 
##########################-------------Deployment----------------#####################################

    # - name: 'Run Azure webapp deploy action using publish profile credentials'
    #   env:
    #     # AZURE_WEBAPP_NAME is getting fetched from secrets
    #     # AZURE_WEBAPP_PACKAGE_PATH is declared from build path
    #     AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}    # set this to your application's name
    #     AZURE_WEBAPP_PACKAGE_PATH: '${{ github.workspace }}/SDR-WebApp/dist'      # set this to the path to your web app project, defaults to the repository root
    #   uses: azure/webapps-deploy@v2
    #   # Deploy to target machine and path
    #   with: 
    #     app-name: ${{ env.AZURE_WEBAPP_NAME }} # Replace with your app name
    #     package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

    - name: Azure Container Registry Login
      uses: Azure/docker-login@v1
      with:
        # Container registry username
        username: ${{ secrets.ACR_USERNAME }} # default is 
        # Container registry password
        password: ${{ secrets.ACR_PASSWORD }} # default is 
        # Container registry server url
        login-server: ${{ secrets.ACR_NAME }} # default is https://index.docker.io/v1/
    - run: |
        cp '${{ github.workspace }}/Dockerfile' '${{ github.workspace }}/SDR-WebApp/dist/SDR-WebApp'
        cp '${{ github.workspace }}/nginx.conf' '${{ github.workspace }}/SDR-WebApp/dist/SDR-WebApp'
        cd ${{ github.workspace }}/SDR-WebApp/dist/SDR-WebApp
        ls
        docker build . -t ${{ secrets.ACR_NAME }}/sdruibuild:latest
        docker push ${{ secrets.ACR_NAME }}/sdruibuild:latest
        
    - uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
        images: '${{ secrets.ACR_NAME }}/sdruibuild:latest'



       
